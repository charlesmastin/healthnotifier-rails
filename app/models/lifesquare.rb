class Lifesquare < ApplicationRecord
  self.primary_key = :lifesquare_uid
  self.sequence_name = :autogenerated

  attr_readonly :lifesquare_uid, :create_user, :create_date
  # attr_accessible :record_order,
  #   :as => [:admin,:default]
  # attr_accessible :lifesquare_uid_mass, :patient_id, :campaign_id, :activation_date, :valid_state,
  #   :valid_state_setter, :batch_id,
  #   :as => :admin

  # For rails_admin
  alias_attribute :name, :lifesquare_uid

  def lifesquare_uid_mass
    self[:lifesquare_uid_mass]
  end

  def lifesquare_uid_mass=(val)
    self[:lifesquare_uid_mass] = val.upcase
  end

  # Table relationships
  belongs_to :campaign
  belongs_to :patient
  belongs_to :lifesquare_code_batch, :foreign_key => :batch_id, :primary_key => :lifesquare_code_batch_id

  # Validations
  validates :lifesquare_uid, :presence => true, :length => { :is => 9 }

  before_validation do
    self[:lifesquare_uid] = self[:lifesquare_uid_mass] if self[:lifesquare_uid].blank? && self[:lifesquare_uid_mass].present?
  end

  def check_for_pending_coverage_expiration(patients_to_get_reminders_hash, lead_time_for_reminder_in_days)
    patient = self.patient
    coverage_for_patient = patient.get_most_recent_coverage
    if coverage_for_patient
      send_reminder = coverage_for_patient.coverage_reminder_required?(lead_time_for_reminder_in_days)
      if send_reminder
        patients_to_get_reminders_hash[self.lifesquare_uid] = {}
        patients_to_get_reminders_hash[:account] = patient.account
        patients_to_get_reminders_hash[:patient] = patient
        patients_to_get_reminders_hash[:coverage_end] = coverage_for_patient.coverage_end
      end
    end
    return patients_to_get_reminders_hash
  end

  def save_with_collision_detection
    count = 0
    is_saved = false
    # this is an attempt at avoiding collisions, since the static generator has now awareness of existing codes
    until (count==3)||is_saved==true
      is_saved = (self.save) != 0
      count +=1
    end
    is_saved
  end

  def formatted_str
    if (str = lifesquare_uid).size >= 9
      str[0,3] + ' '  + str[3,3] + ' ' + str[6,3]
    else
      ''
    end
  end

  def claimable?
    # jerry frowns on this
    if patient_id == nil and activation_date == nil and valid_state != 2
      return true
    end
    false
  end

  # static son
  def self.generate_code
    letters = %w{A B C D E F G H J K L M N P Q R S T U V W X Y Z}
    digits = %w{2 3 4 5 6 7 8 9}
    all = letters + digits
    code_length = 9
    max_consecutive_letters = 2
    blacklist = %w{666, 69}

    blacklisted = true
    while blacklisted
      # Generate code, respecting limit on consecutive letters
      s = ''
      consecutive_letters = 0
      for i in 0...code_length
        if consecutive_letters < max_consecutive_letters
          c = all.to_a[SecureRandom.random_number(all.length)]
          if letters.include? c
            consecutive_letters += 1
          else
            consecutive_letters = 0
          end
        else
          c = digits.to_a[SecureRandom.random_number(digits.length)]
          consecutive_letters = 0
        end
        s += c
      end

      # Check blacklist
      blacklisted = false
      for b in blacklist
        if s.include? b
          blacklisted = true
          break
        end
      end
      if not blacklisted
        return s
      end
    end
  end

end
